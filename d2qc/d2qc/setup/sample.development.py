"""
Django settings for d2qc project.

Generated by 'django-admin startproject' using Django 2.1.dev20180428173945.

For more information on this file, see
https://docs.djangoproject.com/en/dev/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/dev/ref/settings/
"""

from .base import *

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '(fsgs2+g=&sxh*y+x&h&$+(%mlx6)##(q%j=2t016*abzc^c*m'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True


# Database
# https://docs.djangoproject.com/en/dev/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': 'd2qc',
        'USER': 'd2qc',
        'PASSWORD': 'd2qc',
        'HOST': 'localhost',
        'PORT': '',
    }
}

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'd2qc_cache',
        'TIMEOUT': None,
    }
}

# Settings used by the restore from prod script
PROD_SERVER_IP = '158.39.74.107'
PROD_SERVER_USER_DATA_FOLDER = '/mnt/data/user_data'
PROD_SERVER_DB_FILE = '/mnt/data/backup/latest.dump'

# Only in your development settings:
DEV_ADMIN_PROPERTIES = {
    'user': 'admin',
    'password': '123',
    'email': 'jhe052@uib.no',
}
# # More info on logging: https://docs.djangoproject.com/en/2.2/topics/logging/
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'filters': {
#         'require_debug_true': {
#             '()': 'django.utils.log.RequireDebugTrue',
#         }
#     },
#     # Loggers are responsible for passing log messages to handlers. If message
#     # level is below the level set for the logger, the message will be
#     # ignored.
#     'loggers': {
#         'django': {
#             'level': 'DEBUG',
#             'handlers': ['console','file'],
#         }
#         # Logging debug level from django.db.backends will print all sql
#         # queries executed during requests.
#         'django.db.backends': {
#             'level': 'DEBUG',
#             'handlers': ['console'],
#         }
#     }
#    # You can define a root logger on the top level, to handle all log events.
#    'root': {
#        'level': 'DEBUG',
#        'handlers': ['console','file'],
#    }
#     'handlers': {
#         # Display debug info in the console. This makes sense for debugging if
#         # you are using the built in Django development web server.
#         'console': {
#             'level': 'DEBUG',
#             'filters': ['require_debug_true'],
#             'class': 'logging.StreamHandler',
#         },
#         # Log errors to file. This can be used in production as well. In this
#         # example, errors are logged to /vagrant/error.log. In production make
#         # sure the error.log is on a different partition than the data and the
#         # application, so that filling up the disk with log-data don't break
#         # application.
#         'file': {
#             'level': 'ERROR',
#             'class': 'logging.FileHandler',
#             'filename': "{}/error.log".format(settings.PROJECT_DIR),
#         },
#     },
# }

EMAIL_USE_TLS = True
EMAIL_HOST = ''
EMAIL_HOST_USER = ''
EMAIL_HOST_PASSWORD = ''
EMAIL_PORT = 26
